<?php

include_once "session-start.php";

// make sure we process any persistent login state
include_once "login-persist.php";
checkPersistentLogin();

include "pagetpl.php";
include_once "util.php";

include_once "dbconnect.php";
$db = dbConnect();

// get the request parameters
$term = get_req_data('searchfor');
$bTerm = get_req_data('searchbar');
if ($term == "" && $bTerm != "")
    $term = $bTerm;

$tTerm = get_req_data('tterm');
$qterm = mysql_real_escape_string($term, $db);

$hrefTerm = ($term ? $term : $tTerm);
$hrefSearchGame = "href=\"search?tterm=$hrefTerm\" "
                  . "onclick=\"javascript:newSearch('');return false;\"";
$hrefSearchList = "href=\"search?list&tterm=$hrefTerm\" "
                  . "onclick=\"javascript:newSearch('list');return false;\"";
$hrefSearchMember = "href=\"search?member&tterm=$hrefTerm\" "
                    . "onclick=\"javascript:newSearch('member');return false;\"";

// get the search type
$searchType = (isset($_REQUEST['list']) ? "list" :
               isset($_REQUEST['member']) ? "member" :
               "game");

if (isset($_REQUEST['list'])) {
    $searchType = "list";
    $searchButton = "Search Lists";
    $hiddenTypeField = "<input type=\"hidden\" name=\"list\" value=\"1\">";
    $otherBrowseList = "<a href=\"search?browse\">Games</a> - "
                       . "<a href=\"search?browse&member\">Members</a>";
}
else if (isset($_REQUEST['member'])) {
    $searchType = "member";
    $searchButton = "Search Members";
    $hiddenTypeField = "<input type=\"hidden\" name=\"member\" value=\"1\">";
    $otherBrowseList = "<a href=\"search?browse\">Games</a> - "
                       . "<a href=\"search?browse&list\">Lists</a>";
}
else {
    $searchType = "game";
    $searchButton = "Search Games";
    $hiddenTypeField = "";
    $otherBrowseList = "<a href=\"search?browse&list\">Lists</a> - "
                       . "<a href=\"search?browse&member\">Members</a>";
}

$pg = isset($_REQUEST['pg']) ? $_REQUEST['pg'] : "";
$sortby = isset($_REQUEST['sortby']) ? $_REQUEST['sortby'] : "";

$browse = isset($_REQUEST['browse']);

define("PER_PAGE", 20);

// we can't be at a page number less than 1
if ($pg < 1)
    $pg = 1;

// calculate where that puts us in the results
$firstOnPage = ($pg - 1) * PER_PAGE;
$lastOnPage = $firstOnPage + PER_PAGE - 1;

// callback to prepend a "+" to a search word
function prependPlus($txt)
{
    return "+" . $txt;
}

// is the given string a name suffix?
function isNameSuffix($s)
{
    return in_array(strtolower($s),
                    array("jr", "jr.", "sr", "sr.", "phd", "ph.d.",
                          "md", "m.d."));
}

function unNegate($w)
{
    if (substr($w, 0, 1) == '-')
        $w = substr($w, 1);
    return $w;
}

// if we have a search term, find it
if ($term || $browse) {

    // set up the parameters for the type of search we're performing
    if ($searchType == "list") {

        // special keywords for list search
        $specialMap = array(
            "author:" => array("users.name", 0));

        // SELECT parameters for list search
        $selectList = "reclists.id as id,
                       title,
                       `desc`,
                       users.id as userid,
                       users.name as username,
                       count(gameid) as itemcount";
        $tableList = "reclists
                      left outer join reclistitems
                        on reclistitems.listid = reclists.id,
                      users";
        $baseWhere = "and reclists.userid = users.id";
        $groupBy = "group by reclistitems.listid";
        $baseOrderBy = "title";
        $matchCols = "title, keywords";
        $likeCol = "title";
        $summaryDesc = "Lists";

    } else if ($searchType == "member") {

        // special keywords for member search
        $specialMap = array(
            "location:" => array("location", 0));

        // SELECT parameters for member queries
        $selectList = "id,
                       name,
                       location,
                       profile,
                       date_format(created, '%M %e, %Y') as createdfmt,
                       (picture is not null) as haspic";
        $tableList = "users";
        $baseWhere = "";
        $groupBy = "";
        $baseOrderBy = "name";
        $matchCols = "name";
        $likeCol = "name";
        $summaryDesc = "Members";

    } else {

        // special keywords for game search:  "keyword:" => descriptor
        // where the descriptor is an array:
        //   [0] = name of column to query
        //   [1] = 0 for text matches, 1 for numeric range matches, 2
        //         for exact numeric matches, 99 for special-case handling
        //   [2] = true -> the match expression goes in the HAVING clause
        //         rather than the WHERE clause
        $specialMap = array(
            "genre:" => array("genre", 0),
            "published:" => array("date_format(published, '%Y')", 1),
            "system:" => array("system", 0),
            "series:" => array("seriesname", 0),
            "tag:" => array("tags", 0),
            "bafs:" => array("bafsid", 2),
            "rating:" => array("avg(reviews.rating)", 1, true),
            "#reviews:" => array(
                "count(if(reviews.special is null,reviews.review,null))",
                1, true),
            "ratingdev:" => array("stddev(reviews.rating)", 1, true),
            "#ratings:" => array("count(reviews.rating)", 1, true),
            "forgiveness:" => array("forgiveness", 0),
            "language:" => array("language", 99),
            "author:" => array("author", 99),
            "ifid:" => array("/ifid/", 99));

        // SELECT parameters for game queries
        $selectList = "games.id as id,
                       title,
                       author,
                       tags,
                       games.moddate as moddate,
                       date_format(published, '%Y') as pubyear,
                       (coverart is not null) as hasart,
                       avg(reviews.rating) as avgrating,
                       count(reviews.rating) as ratingcnt,
                       stddev(reviews.rating) as ratingdev,
                       sort_title, sort_author";
        $tableList = "games
                      left outer join reviews on reviews.gameid = games.id
                        and ifnull(now() >= reviews.embargodate, 1)";
        $baseWhere = "";
        $groupBy = "group by games.id";
        $baseOrderBy = "sort_title";
        $matchCols = "title, author, `desc`, tags";
        $likeCol = "title";
        $summaryDesc = "Games";
    }

    // parse the search
    for ($ofs = 0, $len = strlen($term), $words = array(),
         $specials = array(), $specialsUsed = array() ; ; $ofs++) {
        // skip spaces
        if (!preg_match("/\S/", $term, $m, PREG_OFFSET_CAPTURE, $ofs))
            break;

        // skip to the match
        $ofs = $m[0][1];

        // find the end of this word
        $start = $ofs;
        if ($term{$ofs} == '"') {
            // we have a quoted word
            $quoted = true;

            // the word doesn't end until the matching quote - but
            // skip stuttered quotes
            for ($start++, $ofs++ ; $ofs < $len ; $ofs++) {
                // check for a quote
                if ($term{$ofs} == '"') {
                    // skip stuttered quotes
                    if ($ofs+1 < $len && $term{$ofs+1} == '"')
                        $ofs++;
                    else
                        break;
                }
            }
        } else {
            // it's unquoted
            $quoted = false;

            // the word ends at the next whitespace character
            if (preg_match("/\s/", $term, $m, PREG_OFFSET_CAPTURE, $ofs))
                $ofs = $m[0][1];
            else
                $ofs = $len;
        }

        // pull out this word
        $w = substr($term, $start, $ofs - $start);

        // if it's unquoted, check for special prefixes
        if (!$quoted
            && preg_match("/^[#a-z]+:/i", $w, $m)
            && isset($specialMap[$m = $m[0]])) {

            // set up the new special entry - this is an array with
            // element [0] giving the special descriptor, and [1]
            // giving the search text
            $specials[] = array($specialMap[$m], "");

            // note that we've used this special item
            $specialsUsed[$m] = true;

            // resume parsing from the ":" after the keyword
            $ofs = $start + strlen($m) - 1;
        } else {
            // Ordinary word - add it to the appropriate list.

            // if we're in a special, note it
            $s = (count($specials) == 0
                  ? null : $specials[count($specials)-1]);

            // if it's quoted, and not in a special list, add back the quotes
            if ($quoted && !$s)
                $w = "\"$w\"";

            // If we have any specials, it adds to the last special's
            // match text.  Otherwise, it adds a word to the full
            // text search list.
            if ($s) {
                if ($s[1])
                    $s[1] .= " $w";
                else
                    $s[1] = $w;
                $specials[count($specials)-1] = $s;
            }
            else
                $words[] = $w;
        }
    }

    

    // start out the WHERE and HAVING clauses as nothing
    $where = "";
    $having = "";
    $relevance = "";

    // add in the full-text part, if applicable
    if (count($words)) {
        // Run through the match words to see if we have all negated
        // terms.  If we do, we want to invert the search with NOT MATCH,
        // because MySQL otherwise would fairly uselessly interpret the
        // query as "<empty set> minus <exclusion words>".  We want to
        // interpreter this as "<everything> minus <exclusions>" instead.
        $notCount = 0;
        $matchMode = "";
        foreach ($words as $w) {
            if (substr($w, 0, 1) == '-')
                $notCount++;
        }
        if ($notCount == count($words)) {
            $matchMode = "not";
            $words = array_map("unNegate", $words);
        }

        // build the MATCH..AGAINST expression
        $matchWords = mysql_real_escape_string(implode(" ", $words), $db);
        $matchExpr = "match ($matchCols) "
                     . "against ('$matchWords' in boolean mode)";

        // add the LIKE expression for exact title matching
        $likeWords =
            mysql_real_escape_string(quoteSqlLike(implode(" ", $words), $db));
        $likeExpr = "($likeCol like '$likeWords' ";
        $likeSubExpr = $and = "";
        foreach ($words as $w) {
            $w = mysql_real_escape_string(quoteSqlLike($w), $db);
            if ($w != "" && $w{0} != '"') {
                if (strpos("+=<>\"", $w{0}) !== false)
                    $w = substr($w, 1);
                $likeSubExpr .= "$and $likeCol like '%$w%'";
                $and = " and";
            }
        }
        if ($likeSubExpr != "")
            $likeExpr .= " or ($likeSubExpr)";
        $likeExpr .= ")";

        // build the full expression
        $expr = "($matchMode ($matchExpr or $likeExpr))";

        // use it as the start of the WHERE clause
        $where = $expr;

        // it's also the RELEVANCE column in the query
        $relevance = ", $matchExpr as relevance";
    }

    // add the specials
    foreach ($specials as $s) {
        // pull out the descriptor and search text
        $desc = $s[0];
        $col = $desc[0];
        $typ = $desc[1];
        $txt = $s[1];
        $forHaving = count($desc) >= 3 && $desc[2];
        $expr = "1";

        // build the appropriate expression, based on the descriptor type
        switch ($typ) {
        case 0:
            // simple text match
            $txt = mysql_real_escape_string(quoteSqlLike($txt), $db);
            if ($txt != "")
                $expr = "$col LIKE '%$txt%'";
            else
                $expr = "($col = '' or $col is null)";
            break;

        case 1:
            // numeric range match
            if ($txt == "")
                $expr = "$col is null";
            else if (preg_match("/^([0-9.]+)-([0-9.]+)$/", $txt, $m))
                $expr = "$col >= '{$m[1]}' AND $col <= '{$m[2]}'";
            else if (preg_match("/^([0-9.]+)[+-]$/", $txt, $m))
                $expr = "$col >= '{$m[1]}'";
            else if (preg_match("/^-([0-9.]+)$/", $txt, $m))
                $expr = "$col <= '{$m[1]}'";
            else if (preg_match("/^[0-9.]+$/", $txt))
                $expr = "$col = '$txt'";
            else
                $expr = "$col = '" . mysql_real_escape_string($txt, $db) . "'";
            break;

        case 2:
            // simple numeric equivalence
            if ($txt == "")
                $expr = "$col is null";
            else {
                $txt = (int)$txt;
                $expr = "$col = '$txt'";
            }
            break;

        case 99:
            // special-case handling
            switch ($col) {
            case '/ifid/':
                $txt = mysql_real_escape_string($txt, $db);
                if ($txt != "") {
                    $tableList .= " join ifids on games.id = ifids.gameid";
                    $expr = "ifids.ifid = '$txt'";
                } else {
                    $tableList .= " left outer join ifids "
                                  . "on games.id = ifids.gameid";
                    $expr = "ifids.ifid is null";
                }
                break;

            case 'author':
                // get the names in sorting format
                $nameList = splitPersonalNameList($txt);

                // look for each name in the list
                $expr = "(";
                $or = "";
                foreach ($nameList as $n) {
                    // look for this exact name embedded in the author field
                    $expr .= "$or author like '%"
                             . mysql_real_escape_string(quoteSqlLike($n), $db)
                             . "%' ";

                    // get the sorting version of the name - LAST, SUFFIX,
                    // FIRST, MIDDLE, and split into an array
                    $nl = array_map("trim", explode(",",
                        getSortingPersonalName($n)));

                    // if the second element is a suffix, add it back to
                    // the last name
                    if (count($nl) > 1 && isNameSuffix($nl[1])) {
                        $nl[0] .= ", {$nl[1]}";
                        $nl = array_splice($nl, 1, 1);
                    }

                    // now look for <first initial>% <last name>
                    if (count($nl) >= 2) {
                        $expr .= " or author rlike '[[:<:]]"
                                 . mysql_real_escape_string(
                                     quoteSqlRLike($nl[1]{0}), $db)
                                 . ".*[[:space:]]+"
                                 . mysql_real_escape_string(
                                     quoteSqlRLike($nl[0]), $db)
                                     . "[[:>:]]'";
                    }

                    // join the next round with OR
                    $or = " or";
                }
                $expr .= ")";
                break;

            case 'language':
                // If it's a three-letter code, look up the two-letter
                // equivalent; if it's a two-letter code, look up all
                // three-letter equivalents; if it's longer, look up
                // the two- and three-letter codes by name
                $qtxt = mysql_real_escape_string($txt);
                if (strlen($txt) == 0) {
                    $expr = "(language = '' or language is null)";
                } else {
                    if (strlen($txt) == 2)
                        $sql = "select id3 from iso639x where id2='$qtxt'";
                    else if (strlen($txt) == 3)
                        $sql = "select id2 from iso639x where id3='$qtxt'";
                    else if (strlen($txt) > 0) {
                        $qtxt = mysql_real_escape_string(
                            quoteSqlLike($txt), $db);
                        $sql =
                            "select id2 from iso639x where name like '%$qtxt%'
                             union
                             select id3 from iso639x where name like '%$qtxt%'";
                    }
                    
                    $result = mysql_query($sql, $db);

                    // build the expression - match the original string or any
                    // of the results
                    $qtxt = mysql_real_escape_string(quoteSqlLike($txt), $db);
                    $expr = "(language like '$qtxt' "
                            . "or language like '$qtxt-%' ";
                    for ($i = 0 ; $i < mysql_num_rows($result) ; $i++) {
                        list($cl) = mysql_fetch_row($result);
                        if ($cl)
                            $expr .= "or language like '$cl' "
                                     . "or language like '$cl-%' ";
                    }
                    $expr .= ")";
                }
                break;
            }
        }
        

        // add it to the WHERE or HAVING clause under construction
        if ($forHaving) {
            if ($having)
                $having .= " AND $expr";
            else
                $having = $expr;
        } else {
            if ($where)
                $where .= " AND $expr";
            else
                $where = $expr;
        }
    }

    // there's no default ORDER BY
    $defOrderBy = "";

    // the sorting control list depends on the table
    switch ($searchType) {
    case "game":
        if ($browse) {
            $sortList = array(
                'lnew' => array('moddate desc,', 'Newest Listing First'),
                'lold' => array('moddate,', 'Oldest Listing First'),
                'ratu' => array('avgrating desc, ratingcnt desc,',
                                'Highest Rated First'),
                'ratd' => array('avgrating, ratingcnt desc,',
                                'Lowest Rated First'),
                'ttl' => array('sort_title,', 'Sort by Title'),
                'auth' => array('sort_author,', 'Sort by Author'),
                'pnew' => array('pubyear desc,', 'Latest Publication First'),
                'pold' => array('pubyear,', 'Earliest Publication First'),
                'rand' => array('rand(),', 'Random Order'));
            $defOrderBy = "moddate desc,";
        } else {
            $sortList = array(
                'rel' => array('', 'Sort by Relevance'),
                'ttl' => array('sort_title,', 'Sort by Title'),
                'auth' => array('sort_author,', 'Sort by Author'),
                'ratu' => array('avgrating desc,', 'Highest Rated First'),
                'ratd' => array('avgrating,', 'Lowest Rated First'),
                'rcu' => array('ratingcnt desc, avgrating desc,',
                               'Most Ratings First'),
                'rcd' => array('ratingcnt, avgrating desc,',
                               'Least # of Ratings First'),
                'rsdu' => array('ratingdev desc, avgrating desc, ratingcnt desc,',
                                'Rating Deviation - High to Low'),
                'rsdd' => array('ratingdev, avgrating desc, ratingcnt desc,',
                                'Rating Deviation - Low to High'),
                'new' => array('pubyear desc,', 'Latest Publication First'),
                'old' => array('pubyear,', 'Earliest Publication First'),
                'rand' => array('rand(),', 'Random Order'));
        }

        if (!isset($specialsUsed['ratingdev:'])) {
            unset($sortList['rsdu']);
            unset($sortList['rsdd']);
        }
        if (!isset($specialsUsed['#ratings:'])
            && !isset($specialsUsed['ratingdev:'])) {
            unset($sortList['rcu']);
            unset($sortList['rcd']);
        }
        break;

    case "list":
        $sortList = array(
            'ttl' => array('title,', 'Sort by List Title'),
            'usr' => array('username,', 'Sort by List Author'),
            'new' => array('moddate desc,', 'Newest First'),
            'old' => array('moddate,', 'Oldest First'),
            'rand' => array('rand(),', 'Random Order'));
        break;

    case "member":
        $sortList = array(
            'nm' => array('name,', 'Sort by Name'),
            'loc' => array('location,', 'Sort by Location'),
            'new' => array('created desc,', 'Newest First'),
            'old' => array('created,', 'Oldest First'),
            'rand' => array('rand(),', 'Random Order'));
        break;

    default:
        $sortList = array();
        break;
    }

    // figure the ordering
    $orderBy = (isset($sortList[$sortby]))
               ? $sortList[$sortby][0]
               : $defOrderBy;

    // add the relevance to the ORDER BY
    if ($relevance)
        $orderBy .= "if($likeExpr,0,1), relevance desc,";

    // if there's no WHERE clause, select anything
    if ($where == "")
        $where = "1";

    // if there's a HAVING clause, plug in the HAVING phase
    if ($having != "")
        $having = "having $having";

    // build the SELECT statement
    $sql = "select sql_calc_found_rows
              $selectList
              $relevance
            from
              $tableList
            where
              $where
              $baseWhere
            $groupBy
            $having
            order by
              $orderBy
              $baseOrderBy
            limit
              $firstOnPage, " . PER_PAGE;

    // run the query
    $result = mysql_query($sql, $db);

    $errMsg = false;
    if ($result) {
        // fetch the results
        for ($rows = array(), $i = 0 ; $i < mysql_num_rows($result) ; $i++)
            $rows[] = mysql_fetch_array($result, MYSQL_ASSOC);

        // get the total size of the result set
        $result = mysql_query("select found_rows()", $db);
        list($rowcnt) = mysql_fetch_row($result);

    } else {
        $rows = array();
        $rowcnt = 0;
        $errMsg = "<p><span class=errmsg>"
                  . "An error occurred searching the database.</span><p>";
    }

    // if there's exactly one row, jump directly to the result page
    if ($rowcnt == 1 && !$browse) {
        $redir = false;
        switch ($searchType) {
        case "game":
            $redir = "viewgame?id={$rows[0]['id']}";
            break;

        case "list":
            $redir = "viewlist?id={$rows[0]['id']}";
            break;

        case "member":
            $redir = "showuser?id={$rows[0]['id']}";
            break;
        }

        // if we found a target, redirect to it, so that we go directly to
        // the result rather than showing a pointless single-item list
        if ($redir) {
            header("HTTP/1.1 301 Moved Permanently");
            header("Content-Type: text/html");
            header("Location: $redir");

            echo "<a href=\"$redir\">Redirecting (click here if your "
                . "browser doesn't redirect automatically)</a>";
        }
    }
}

// start the page
$searchTypeName = ($searchType == "list" ? "Recommended Lists" :
                   ($searchType == "member" ? "Members" :
                    "Games"));
pageHeader($term == "" && $browse ? "Browse $searchTypeName"
                                  : "Search for $searchTypeName",
           "advsearch.searchfor");

$commonInstructions =
    "<p><b>+<i>word</i></b> makes <i>word</i> mandatory - only items
     that contain this word will be listed.

     <p><b>-<i>word</i></b> makes <i>word</i> prohibited - only items
     that <i>don't</i> contain this word will be listed.

     <p><b>\"<i>phrase</i>\"</b> searches for the <i>exact</i> phrase within
        the quotes: all of the words have to be matched in the exact
        order given.";

if ($term || $browse) {

    ?>

    <form name="advsearch" method="get" action="search">
       <input type="text" name="searchfor" id="searchfor" size=50
              value="<?php echo htmlspecialchars($term) ?>">
       <input type="submit" name="searchgo"
             value="<?php echo $searchButton ?>">
       <?php echo $hiddenTypeField ?>
       <br>
       <span class=details>
          <a <?php echo $hrefSearchGame ?>>Advanced Search Games</a> -
          <a <?php echo $hrefSearchList ?>>Search Lists</a> -
          <a <?php echo $hrefSearchMember ?>>Search Members</a>
       </span>
    </form>

    <?php
}
else if ($searchType == "list") {

    ?>

    <form name="advsearch" method="get" action="search">
       <h2>Search Recommended Lists</h2>
       <table cellspacing=0 cellpadding=0 border=0>
          <tr>
             <td>
                <b>Search for:&nbsp;</b>
             </td>
             <td>
                <input type="text" name="searchfor" id="searchfor" size=50
                      value="<?php echo htmlspecialchars($tTerm) ?>">
                <input type="submit" name="searchgo" value="Search Lists">
             </td>
          </tr>
          <tr>
             <td></td>
             <td>
                <span class=details><b>Other searches:</b>
                   <a <?php echo $hrefSearchGame ?>>Games</a> -
                   <a <?php echo $hrefSearchMember ?>>Members</a>
                </span>
             </td>
          </tr>
       </table>
       <input type="hidden" name="list" value="1">
    </form>

    <br><br>
    <h3>Search Tips</h3>

    <div class=notes>

    <p>By default, IFDB searches each list's title and keywords for the
    words you enter, and shows lists that match at least one of your
    search terms.  You can customize the search with the following
    special modifiers:

    <div class=indented>

       <?php echo $commonInstructions ?>

       <p><b>author:<i>member name</i></b> only shows lists created by
       the given author.

    </div>

    </div>

    <?php
}
else if ($searchType == "member") {

    ?>

    <form name="advsearch" method="get" action="search">
       <h2>Search Member Directory</h2>
       <table cellpadding=0 cellspacing=0>
          <tr>
             <td>
                <b>Search for:&nbsp;</b>
             </td>
             <td>
                <input type="text" name="searchfor" id="searchfor" size=50
                      value="<?php echo htmlspecialchars($tTerm) ?>">
                <input type="submit" name="searchgo" value="Search Members">
             </td>
          </tr>
          <tr>
             <td></td>
             <td>
                <span class=details><b>Other searches:</b>
                   <a <?php echo $hrefSearchGame ?>>Games</a> -
                   <a <?php echo $hrefSearchList ?>>Recommended Lists</a>
                </span>
                </td>
          </tr>
       </table>
       <input type="hidden" name="member" value="1">
    </form>

    <br><br>
    <h3>Search Tips</h3>

    <div class=notes>

    <p>By default, IFDB searches each member's name for the
    words you enter, and members who match at least one of your
    search terms.  You can customize the search with the following
    special modifiers:

    <div class=indented>

       <?php echo $commonInstructions ?>

       <p><b>location:<i>place</i></b> only shows members with the
       given place name within their location.  For example,
       "location:california" would show members with locations
       that include the word "california."

    </div>

    </div>


    <?php
} else {
    ?>

    <form name="advsearch" method="get" action="search">
       <h2>Search for Games</h2>
       <input type="text" name="searchfor" id="searchfor" size=70
              value="<?php echo htmlspecialchars($tTerm) ?>">
       <input type="submit" name="searchgo" value="Search Games">
       <br>
       <span class=details><b>Other searches:</b>
          <a <?php echo $hrefSearchList ?>>Recommended Lists</a> -
          <a <?php echo $hrefSearchMember ?>>Members</a>
       </span>

       <br><br>
       <h3>Search Tips</h3>

       <div class=notes>

       <p>If you're getting too many irrelevant results, try searching
       for a complete phrase in quotes rather than individual words:
       <b>"deep space drifter"</b> rather than <b>deep space
       drifter</b>.

       <p>By default, IFDB searches each game's title, author, and
       description for the words you enter, and shows all of the games
       that match at least one of your search terms.  You can customize
       the search with the following special modifiers:

       <div class=indented>

       <?php echo $commonInstructions ?>

       <p><b>author:<i>name</i></b> lists games by the named author or
          authors.

       <p><b>rating:<i>low-high</i></b> lists games with average ratings
          in the given range (inclusive). For example, <b>rating:2.5-3.5</b>
          lists games rated from 2&frac12; to 3&frac12; stars.  Leave out
          an endpoint for an open-ended search:
          <b>rating:3-</b> lists games with ratings 3 stars and above;
          <b>rating:-2</b> lists games rated 2 stars and below.

       <p><b>#ratings:<i>low-high</i></b> lists games with a total number
          of ratings in the given range.  For example, <b>#ratings:3-</b>
          lists games with three or more ratings.

       <p><b>ratingdev:</i>low-high</i></b> lists games with a ratings
          standard deviation in the given range. (If you use this option,
          the standard deviation for each rating will be shown in parentheses
          after the star rating, and you'll have the option to order the
          results by it.)

       <p><b>#reviews:<i>low-high</i></b> lists games with a total number
          of member reviews in the given range.  (This doesn't count
          editorial reviews.)

       <p><b>genre:<i>genre name</i></b> only shows games with the given genre.
          (If a game's listing has multiple genres, it will match as long
          as <i>genre name</i> is found within the listing. For example,
          <b>genre:western</b> will match a game listed with genre
          "Science Fiction/Western/Romance."

       <p><b>forgiveness:<i>rating</i></b> only shows games with the given
          "forgiveness" rating (on the Zarfian scale: Merciful, Polite,
          Tough, Nasty, Cruel - <?php
             echo helpWinLink("help-forgiveness", "more information");
          ?>).

       <p><b>published:<i>year-year</i></b> only shows games with publication
          dates in the given range.  For example,
          <b>published:1990-2000</b> shows games published from 1990
          to 2000.  <b>published:1990</b> lists only games published
          in 1990.  <b>published:1990-</b> lists games published in 1990
          or later, and <b>published:-2000</b> lists games published in
          2000 or earlier.

       <p><b>language:<i>code</i></b> lists games written in the given
          spoken language.  You can use the English name of the language,
          or a two- or three-letter
          <a href="http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes">ISO-639</a>
          code ("en" for English, "fr" for French, etc).

       <p><b>system:<i>name</i></b> lists only games written with the
          given development system (TADS, Inform, Hugo, etc).

       <p><b>series:<i>name</i></b> lists only games with the given
          series name.

       <p><b>tag:<i>tag name</i></b> searches for games containing
          the given tag text. (<?php
             echo helpWinLink("help-tags", "What's a tag?");
//<a href="needjs" onclick="javascript:
//          helpWin('help-tags');return false;">What's a tag?</a>
          ?>)

       <p><b>bafs:<i>id</i></b> searches for the game with the given
          <a href="http://www.wurb.com/if">Baf's Guide</a> ID.

       <p><b>ifid:<i>xxx</i></b> searches for a game with the given IFID.
       (<?php
          echo helpWinLink("help-ifid", "What's an IFID?");
//<a href="needjs" onclick="javascript:helpWin('help-ifid');return false;"
//          >What's an IFID?</a>
       ?>)

       </div>

       <p>To search for listings that <i>lack</i> information on genre,
       publication date, language, development system, Baf's Guide entry,
       or IFID, enter the modifier with nothing after the colon.
       For example, to search for games that don't have publication
       date or language settings, enter <b>published: language:</b>.
       

       <p>You can combine these modifiers to create more specific searches.
       For example, "outer space genre:science fiction published:-1990"
       searches for games in the "science fiction" genre published in
       1990 or earlier, with at least one of the words "outer" and
       "space" somewhere in their title, author, or description.

       </div>

    </form>

    <?php
}

if ($term || $browse) {
    // if an error occurred doing the search, show it
    if ($errMsg)
        echo $errMsg;

    // calculate the number of pages available
    $lastPage = (int)floor(($rowcnt + PER_PAGE - 1)/PER_PAGE);
    if ($lastOnPage > $rowcnt - 1)
        $lastOnPage = $rowcnt - 1;

    // show the page controls
    $pageCtl = "<span class=details>"
               . makePageControl("search?searchfor="
                                 . urlencode($term)
                                 . "&sortby=$sortby"
                                 . ($browse ? "&browse" : "")
                                 . ($searchType == "list" ? "&list" : "")
                                 . ($searchType == "member" ? "&member" : ""),
                                 $pg, $lastPage, $firstOnPage, $lastOnPage,
                                 $rowcnt, true)
               . "</span>";

    // if our page number puts us past the end of the result set,
    // just say that we're past the end of the results
    if ($rowcnt == 0) {
        
        echo "<i>No results were found.</i>";

        if ($searchType == "game") {
            echo "<div class=inlinetip>"
                . "<h1>Can't find the game you're looking for?</h1>"
                . "You can help improve IFDB by adding listings for any "
                . "missing games you're aware of. Members can revise "
                . "listings and add new ones. <a href=\"editgame?id=new\">"
                . "Click here</a> to add a new game."
                . "</div>";
        }
        
    } else if ($firstOnPage >= $rowcnt) {
        echo "<i>No more results were found.</i>";
    } else {

        $otherBrowse = "";
        if ($browse)
            $otherBrowse = " - $otherBrowseList";

        // show where we are in the results
        echo "<div style=\"width:100%;\">"
            . "<table class=searchSummary cellpadding=0 cellspacing=0><tr>"
            . "<td align=left>"
            . ($term != ""
               ? ("Results for <b>" . htmlspecialchars($term) . "</b>")
               : ($browse ? "<b>Browsing $summaryDesc</b>" : "")
              )
            . $otherBrowse
            . "</td><td align=right>" . ($firstOnPage+1) . "-"
            . ($lastOnPage+1) . " of $rowcnt</td>"
            . "</tr></table></div>";

        echo "<div class=tipbox><h1>Can't find it?</h1>"
            . "If the game you're looking for isn't in our database yet, "
            . "you can help improve IFDB by "
            . "<a href=\"editgame?id=new\">adding a new listing</a> "
            . "yourself. "
            . "</div>";

        // show the sorting controls
        $hids = array("searchfor" => $term);
        if ($browse)
            $hids['browse'] = '1';
        if ($searchType != "game")
            $hids[$searchType] = '1';
        showSortingControls("searchOrder", "sortby", $sortList, $sortby,
                            $hids, "search");

        // show the page controls at the top of the results;
        // if all of the results fit on one page, don't bother with
        // the page controls
        if ($pg == 1 && $rowcnt < PER_PAGE)
            echo "<p>$rowcnt result" . ($rowcnt != 1 ? "s" : "") . " found";
        else
            echo "<p>$pageCtl<br><br>";
        echo "<br><br>";

        for ($i = 0 ; $i < count($rows) ; $i++) {
            // retrieve the row
            $row = $rows[$i];

            // generate the appropriate display
            switch ($searchType) {

            case "game":
                // get the row data, formatted for display
                $id = $row['id'];
                $title = output_encode(htmlspecialchars($row['title']));
                $author = output_encode(htmlspecialchars($row['author']));
                $stars = showStars($row['avgrating']);
                $year = output_encode(htmlspecialchars($row['pubyear']));
                $art = $row['hasart'];
                $rcnt = $row['ratingcnt'];
                $rdev = $row['ratingdev'];

                // show the matching tags only if we were searching for them
                $tagDisp = "";
                if (isset($specialsUsed['tag:'])) {
                    // turn the game's tags into an array
                    $tags = array_map("trim", explode(",", $row['tags']));

                    // scan the tags for matches to the "tag:" search terms
                    $tagsMatched = array();
                    foreach ($specials as $s) {
                        if ($s[0][0] == "tags") {
                            foreach ($tags as $t) {
                                if (strpos(strtolower($t),
                                           strtolower($s[1])) !== false) {
                                    $tagsMatched[$t] = true;
                                    break;
                                }
                            }
                        }
                    }

                    // turn the list into a display list
                    if (count($tagsMatched) != 0) {
                        $sep = "<span class=details>Tags matched: ";
                        foreach ($tagsMatched as $t => $v) {
                            $tu = urlencode($t);
                            $td = htmlspecialchars($t);
                            $tagDisp .= "$sep<a href=\"search?searchfor="
                                        . "tag:$tu\">$td</a>";
                            $sep = ", ";
                        }
                        $tagDisp .= "</span><br>";
                    }
                }

                $ratingExtra = "";
                if (isset($specialsUsed['ratingdev:']) && $rcnt != 0) {
                    $ratingExtra = "$rcnt rating"
                                   . ($rcnt == 1 ? "" : "s")
                                   . ", &sigma;=$rdev";
                }
                else if (isset($specialsUsed['#ratings:']) && $rcnt != 0) {
                    $ratingExtra = "$rcnt rating"
                                   . ($rcnt == 1 ? "" : "s");
                }
                if ($ratingExtra != "")
                    $ratingExtra = "<span class=details>($ratingExtra)</span>";

                // show the item
                echo "<p>";
                if ($art) {
                    // display with art
                    echo "<table class=grid border=0 cellspacing=0 cellpadding=0>"
                        . "<tr><td>"
                        . "<a href=\"viewgame?id=$id\">"
                        . "<img src=\"viewgame?"
                        . "id=$id&coverart&thumbnail=80x80\" border=0>"
                        . "</a></td><td>"
                        . "<a href=\"viewgame?id=$id\">"
                        . "<b>$title</b></a><br>"
                        . "by $author<br>";

                    if ($year)
                        echo "<span class=details>$year</span><br>";

                    echo "$tagDisp$stars$ratingExtra</td></tr></table>";

                } else {
                    // display with no art
                    echo "<a href=\"viewgame?id=$id\">"
                        . "<b>$title</b></a>"
                        . ", by $author";

                    if ($year)
                        echo " ($year)";

                    echo "<br>$tagDisp$stars$ratingExtra<br>";
                }
                break;

            case "list":
                // get the row data
                $id = $row['id'];
                $title = output_encode(htmlspecialchars($row['title']));
                $descInfo = summarizeHtml($row['desc'], 240);
                $desc = fixDesc($descInfo[0]);
                $userid = $row['userid'];
                $username = htmlspecialchars($row['username']);
                $items = $row['itemcount'];

                // show the listing
                echo "<p><a href=\"viewlist?id=$id\">"
                    . "<b>$title</b></a><br>"
                    . "<span class=details>"
                    . "by <a href=\"showuser?id=$userid\">$username</a>"
                    . " - $items game"
                    . ($items == 1 ? "" : "s")
                    . "<br></span>"
                    . ($desc ? "<i>\"$desc\"</i>" : "");

                break;

            case "member":
                // get the row data
                $id = $row['id'];
                $name = htmlspecialchars($row['name']);
                $loc = htmlspecialchars($row['location']);
                $profileInfo = summarizeHtml($row['profile'], 140);
                $profile = fixDesc($profileInfo[0]);
                $created = $row['createdfmt'];
                $pic = $row['haspic'];

                // generate the user listing
                echo "<p><hr class=dots><p>";
                if ($pic) {
                    echo "<table class=grid border=0 cellspacing=0 cellpadding=0>"
                        . "<tr><td>"
                        . "<a href=\"showuser?id=$id\">"
                        . "<img src=\"showuser?id=$id&pic&thumbnail=80x80\" "
                        . "border=0></td><td>"
                        . "<a href=\"showuser?id=$id\">"
                        . "<b>$name</b></a><br>"
                        . "<span class=details>"
                        . ($loc ? "$loc<br>" : "")
                        . "Member since $created<br><br>"
                        . ($profile ? "<i>\"$profile\"</i>" : "")
                        . "</span></td></tr></table>";
                } else {
                    echo "<a href=\"showuser?id=$id\">"
                        . "<b>$name</b></a><br>"
                        . "<span class=details>"
                        . ($loc ? "$loc<br>" : "")
                        . "Member since $created<br><br>"
                        . ($profile ? "<i>\"$profile\"</i>" : "")
                        . "</span>";
                }
                break;
            }
        }

        // add the page controls again at the bottom, if applicable
        if ($pg != 1 || $rowcnt > PER_PAGE)
            echo "<br><br>$pageCtl<br><br>";
    }

    // add another search box at the bottom
    ?>
    <p><hr class=dots>
    <form name="advsearch2" method="get" action="search">
       <center>
          <input type="text" name="searchfor" id="searchfor2" size=50
              value="<?php echo htmlspecialchars($term) ?>">
          <input type="submit" name="searchgo" id="searchgo2"
                value="<?php echo $searchButton ?>">
          <?php echo $hiddenTypeField ?>
       </center>
    </form>

    <?php
    
}


?>
<script type="text/javascript">
<!--
function newSearch(typ)
{
    var t = document.getElementById("searchfor").value;
    var h = "search?tterm=" + encodeURIComponent(t);
    if (typ != "")
        h += "&" + typ;
    location.replace(h);
}
//-->
</script>
<?php


// end the page
pageFooter();

?>
